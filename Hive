Create Database hivehw;

use hivehw;

-- Step 1: Create a table to load the data
CREATE TABLE IF NOT EXISTS amazon_reviews_Video_Games (
    marketplace STRING,
    customer_id STRING,
    review_id STRING,
    product_id STRING,
    product_parent STRING,
    product_title STRING,
    product_category STRING,
    star_rating INT,
    helpful_votes INT,
    total_votes INT,
    vine STRING,
    verified_purchase STRING,
    review_headline STRING,
    review_body STRING,
    review_date STRING
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '\t'  -- Assuming tab-separated values
STORED AS TEXTFILE;

-- Step 2: Load the data from the input TSV file into the table
LOAD DATA LOCAL INPATH '/home/gg7hz/Downloads/amazon_reviews_us_Video_Games_v1_00.tsv'
INTO TABLE amazon_reviews_Video_Games;

-- Step 3: Filter out the header row (where review_id is 'review_id') and filter out rows with missing or invalid values
CREATE TABLE amazon_reviews_Video_Games_cleaned AS
SELECT 
    marketplace,
    customer_id,
    review_id,
    product_id,
    product_parent,
    product_title,
    product_category,
    star_rating,
    helpful_votes,
    total_votes,
    vine,
    verified_purchase,
    review_headline,
    review_body,
    review_date
FROM amazon_reviews_Video_Games
WHERE review_id != 'review_id'  -- Remove the header row
  AND marketplace IS NOT NULL 
  AND customer_id IS NOT NULL 
  AND review_id IS NOT NULL 
  AND product_id IS NOT NULL 
  AND product_title IS NOT NULL 
  AND product_category IS NOT NULL 
  AND star_rating > 0 
  AND helpful_votes >= 0 
  AND total_votes >= 0 
  AND vine IS NOT NULL 
  AND verified_purchase IS NOT NULL 
  AND review_headline IS NOT NULL 
  AND review_body IS NOT NULL 
  AND review_date IS NOT NULL
  AND marketplace != '' 
  AND customer_id != '' 
  AND review_id != '' 
  AND product_id != '' 
  AND product_parent != '' 
  AND product_title != '' 
  AND product_category != '' 
  AND vine != '' 
  AND verified_purchase != '' 
  AND review_headline != '' 
  AND review_body != '' 
  AND review_date != '';

-- Or you can create another table to store the cleaned data:
CREATE TABLE OutputTable AS
SELECT * FROM amazon_reviews_Video_Games_cleaned;

-- End of the script


Question 1a:
-- Step 1: Create 'GameTable' to load the cleaned data from the 'amazon_reviews_camera_cleaned' table
CREATE TABLE IF NOT EXISTS GameTable (
    marketplace STRING,
    customer_id STRING,
    review_id STRING,
    product_id STRING,
    product_parent STRING,
    product_title STRING,
    product_category STRING,
    star_rating INT,
    helpful_votes INT,
    total_votes INT,
    vine STRING,
    verified_purchase STRING,
    review_headline STRING,
    review_body STRING,
    review_date STRING
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '\t'
STORED AS TEXTFILE;

-- Step 2: Insert data from 'amazon_reviews_camera_cleaned' into 'GameTable'
INSERT INTO TABLE GameTable
SELECT * FROM amazon_reviews_camera_cleaned;

Question 1b:
-- Step 3: Query for total number of review_id and average star_rating where marketplace is not 'US'
SELECT 
    marketplace, 
    product_category, 
    COUNT(review_id) AS total_reviews,
    AVG(star_rating) AS average_star_rating
FROM GameTable
WHERE marketplace != 'US'  -- Exclude marketplace 'US'
GROUP BY marketplace, product_category;

Question 2:
CREATE TABLE IF NOT EXISTS GameTablePart (
    marketplace STRING,
    customer_id STRING,
    review_id STRING,
    product_id STRING,
    product_parent STRING,
    product_title STRING,
    product_category STRING,
    helpful_votes INT,
    total_votes INT,
    vine STRING,
    verified_purchase STRING,
    review_headline STRING,
    review_body STRING,
    review_date STRING
)
PARTITIONED BY (star_rating INT)  -- Partition by star_rating
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '\t'
STORED AS TEXTFILE;

Question 2a:

-- Insert data into partition where star_rating = 1
INSERT INTO TABLE GameTablePart PARTITION (star_rating=1)
SELECT 
    marketplace,
    customer_id,
    review_id,
    product_id,
    product_parent,
    product_title,
    product_category,
    helpful_votes,
    total_votes,
    vine,
    verified_purchase,
    review_headline,
    review_body,
    review_date
FROM GameTable
WHERE star_rating = 1;

-- Insert data into partition where star_rating = 2
INSERT INTO TABLE GameTablePart PARTITION (star_rating=2)
SELECT 
    marketplace,
    customer_id,
    review_id,
    product_id,
    product_parent,
    product_title,
    product_category,
    helpful_votes,
    total_votes,
    vine,
    verified_purchase,
    review_headline,
    review_body,
    review_date
FROM GameTable
WHERE star_rating = 2;

Question 2b:

SELECT 
    star_rating,
    SUM(helpful_votes) AS total_helpful_votes,
    SUM(total_votes) AS total_votes
FROM GameTablePart
GROUP BY star_rating
ORDER BY total_votes DESC;

Question 3:

CREATE TABLE IF NOT EXISTS GameTableBuck (
    marketplace STRING,
    customer_id STRING,
    review_id STRING,
    product_id STRING,
    product_parent STRING,
    product_title STRING,
    product_category STRING,
    star_rating INT,
    helpful_votes INT,
    total_votes INT,
    vine STRING,
    verified_purchase STRING,
    review_headline STRING,
    review_body STRING,
    review_date STRING
)
CLUSTERED BY (review_date) INTO 3 BUCKETS  -- Bucketing on 'review_date' with 3 buckets
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '\t'
STORED AS TEXTFILE;

-- Insert all data from GameTable into GameTableBuck
INSERT INTO TABLE GameTableBuck
SELECT 
    marketplace,
    customer_id,
    review_id,
    product_id,
    product_parent,
    product_title,
    product_category,
    star_rating,
    helpful_votes,
    total_votes,
    vine,
    verified_purchase,
    review_headline,
    review_body,
    review_date
FROM GameTable;

-- Step 1: Simulate bucketing by using NTILE(3) to partition by review_date
SELECT 
    bucket_num,
    MIN(review_date) AS min_review_date,
    MAX(review_date) AS max_review_date
FROM (
    SELECT 
        NTILE(3) OVER (ORDER BY review_date) AS bucket_num, 
        review_date
    FROM GameTableBuck
) AS Buckets

-- Step 2: Group by bucket_num to calculate min and max review_date for each bucket
GROUP BY bucket_num
ORDER BY bucket_num;


Queation 3b:
-- Find average helpful_votes and total_votes for each product_id where average helpful_votes > 1
SELECT 
    product_id,
    AVG(helpful_votes) AS avg_helpful_votes,
    AVG(total_votes) AS avg_total_votes
FROM GameTableBuck
GROUP BY product_id
HAVING AVG(helpful_votes) > 1;

